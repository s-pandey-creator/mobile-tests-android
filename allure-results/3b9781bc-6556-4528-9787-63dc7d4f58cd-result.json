{"name": "test_valid_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Authorization Required", "trace": "request = <SubRequest 'driver' for <Function test_valid_login>>\n\n    @pytest.fixture(scope=\"function\")\n    def driver(request):\n        \"\"\"Fixture to create and tear down a BrowserStack Appium driver.\"\"\"\n        hub = os.environ.get(\"BS_HUB\", \"http://hub-cloud.browserstack.com/wd/hub\")\n        platform = os.environ.get(\"PLATFORM\", \"android\").lower()\n    \n        caps = {\n            \"platformName\": \"Android\" if platform == \"android\" else \"iOS\",\n            \"deviceName\": os.environ.get(\"BS_DEVICE\", \"Samsung Galaxy S22\" if platform == \"android\" else \"iPhone 14\"),\n            \"platformVersion\": os.environ.get(\"BS_PLATFORM_VERSION\", \"12.0\" if platform == \"android\" else \"16\"),\n            \"app\": os.environ.get(\n                \"BROWSERSTACK_APP\",\n                \"bs://06cff65c394b08d3fd0b3e93bfb23d612589f234\"\n            ),\n            \"automationName\": \"UiAutomator2\" if platform == \"android\" else \"XCUITest\",\n            \"browserstack.user\": os.environ.get(\"BROWSERSTACK_USER\", \"sandeep_y6l5vm\"),\n            \"browserstack.key\": os.environ.get(\"BROWSERSTACK_KEY\", \"9WrWAvFqpmhBcJggzJzy\"),\n            \"project\": \"Mobile Demo\",\n            \"build\": f\"{platform.capitalize()} Build\",\n            \"name\": request.node.name,\n        }\n    \n>       drv = create_remote(hub, caps)\n\nconftest.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:73: in create_remote\n    return webdriver.Remote(command_executor=hub, options=opts)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:249: in __init__\n    super().__init__(\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:263: in __init__\n    self.start_session(capabilities)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:342: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000215014FBB10>\nresponse = {'status': 401, 'value': 'Authorization Required'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: Authorization Required\n\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:196: WebDriverException"}, "start": 1758099544643, "stop": 1758099544643, "uuid": "1581b7ba-eb99-45ac-a1de-815adb3ad155", "historyId": "27b150db6705ef6511c7ecb21ff68d02", "testCaseId": "ab68c09e23714aa68c720c2ca07c0ecf", "fullName": "tests.test_login#test_valid_login", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "8680-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}