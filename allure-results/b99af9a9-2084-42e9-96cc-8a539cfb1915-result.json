{"name": "test_locked_out_user_shows_error", "status": "broken", "statusDetails": {"message": "AttributeError: 'dict' object has no attribute 'to_capabilities'", "trace": "request = <SubRequest 'driver' for <Function test_locked_out_user_shows_error>>\n\n    @pytest.fixture(scope=\"function\")\n    def driver(request):\n        \"\"\"Fixture to create and tear down a BrowserStack Appium driver.\"\"\"\n        hub = os.environ.get(\"BS_HUB\", \"http://hub-cloud.browserstack.com/wd/hub\")\n        platform = os.environ.get(\"PLATFORM\", \"android\").lower()\n    \n        caps = {\n            \"platformName\": \"Android\" if platform == \"android\" else \"iOS\",\n            \"deviceName\": os.environ.get(\"BS_DEVICE\", \"Samsung Galaxy S22\" if platform == \"android\" else \"iPhone 14\"),\n            \"platformVersion\": os.environ.get(\"BS_PLATFORM_VERSION\", \"12.0\" if platform == \"android\" else \"16\"),\n            \"app\": os.environ.get(\n                \"BROWSERSTACK_APP\",\n                \"bs://06cff65c394b08d3fd0b3e93bfb23d612589f234\"  # default Android app id\n            ),\n            \"automationName\": \"UiAutomator2\" if platform == \"android\" else \"XCUITest\",\n            \"browserstack.user\": os.environ.get(\"BROWSERSTACK_USER\", \"sandeep_y6l5vm\"),\n            \"browserstack.key\": os.environ.get(\"BROWSERSTACK_KEY\", \"9WrWAvFqpmhBcJggzJzy\"),\n            \"project\": \"Mobile Demo\",\n            \"build\": f\"{platform.capitalize()} Build\",\n            \"name\": request.node.name,\n        }\n    \n>       drv = create_remote(hub, caps)\n\nconftest.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:49: in create_remote\n    return webdriver.Remote(command_executor=hub, options=caps)\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:249: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[AttributeError(\"'WebDriver' object has no attribute 'session_id'\") raised in repr()] WebDriver object at 0x1b994af97f0>\ncommand_executor = <appium.webdriver.appium_connection.AppiumConnection object at 0x000001B994AF8CB0>, keep_alive = True\nfile_detector = None\noptions = {'app': 'bs://06cff65c394b08d3fd0b3e93bfb23d612589f234', 'automationName': 'UiAutomator2', 'browserstack.key': '9WrWAvFqpmhBcJggzJzy', 'browserstack.user': 'sandeep_y6l5vm', ...}\nlocator_converter = <appium.webdriver.locator_converter.AppiumLocatorConverter object at 0x000001B994AF8A70>\nweb_element_cls = <class 'appium.webdriver.webelement.WebElement'>\nclient_config = <appium.webdriver.client_config.AppiumClientConfig object at 0x000001B994AF9010>\n\n    def __init__(\n        self,\n        command_executor: Union[str, RemoteConnection] = \"http://127.0.0.1:4444\",\n        keep_alive: bool = True,\n        file_detector: Optional[FileDetector] = None,\n        options: Optional[Union[BaseOptions, list[BaseOptions]]] = None,\n        locator_converter: Optional[LocatorConverter] = None,\n        web_element_cls: Optional[type[WebElement]] = None,\n        client_config: Optional[ClientConfig] = None,\n    ) -> None:\n        \"\"\"Create a new driver that will issue commands using the wire\n        protocol.\n    \n        Parameters:\n        -----------\n        command_executor : str or remote_connection.RemoteConnection\n            - Either a string representing the URL of the remote server or a custom\n            remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n        keep_alive : bool (Deprecated)\n            - Whether to configure remote_connection.RemoteConnection to use HTTP keep-alive. Defaults to True.\n        file_detector : object or None\n            - Pass a custom file detector object during instantiation. If None, the default\n                LocalFileDetector() will be used.\n        options : options.Options\n            - Instance of a driver options.Options class.\n        locator_converter : object or None\n            - Custom locator converter to use. Defaults to None.\n        web_element_cls : class\n            - Custom class to use for web elements. Defaults to WebElement.\n        client_config : object or None\n            - Custom client configuration to use. Defaults to None.\n        \"\"\"\n    \n        if options is None:\n            raise TypeError(\n                \"missing 1 required keyword-only argument: 'options' (instance of driver `options.Options` class)\"\n            )\n        elif isinstance(options, list):\n            capabilities = create_matches(options)\n            _ignore_local_proxy = False\n        else:\n>           capabilities = options.to_capabilities()\nE           AttributeError: 'dict' object has no attribute 'to_capabilities'\n\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:240: AttributeError"}, "start": 1758099264933, "stop": 1758099264933, "uuid": "e3ca709d-af94-49f3-ab43-237804064f9b", "historyId": "c4547e0766d6c604f1234a91c62fda1f", "testCaseId": "42377a4218ac8a25fd3755815d980eaa", "fullName": "tests.test_invalid_login#test_locked_out_user_shows_error", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_invalid_login"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "13124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_invalid_login"}]}