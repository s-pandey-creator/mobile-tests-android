{"name": "test_locked_out_user_shows_error", "status": "broken", "statusDetails": {"message": "TypeError: missing 1 required keyword-only argument: 'options' (instance of driver `options.Options` class)", "trace": "request = <SubRequest 'driver' for <Function test_locked_out_user_shows_error>>\nbs_credentials = {'app': 'bs://06cff65c394b08d3fd0b3e93bfb23d612589f234', 'key': '9WrWAvFqpmhBcJggzJzy', 'user': 'sandeep_y6l5vm'}\n\n    @pytest.fixture(scope=\"function\")\n    def driver(request, bs_credentials):\n        \"\"\"\n        Driver fixture that supports PLATFORM env var:\n          PLATFORM=android  (default)\n          PLATFORM=ios\n        \"\"\"\n        platform = os.environ.get(\"PLATFORM\", \"android\").lower()\n    \n        if platform == \"ios\":\n            caps = {\n                \"platformName\": \"iOS\",\n                \"deviceName\": os.environ.get(\"BS_DEVICE\", \"iPhone 14\"),\n                \"platformVersion\": os.environ.get(\"BS_PLATFORM_VERSION\", \"16\"),\n                \"app\": bs_credentials[\"app\"],   # ensure this is the iOS bs:// id if using iOS\n                \"automationName\": \"XCUITest\",\n                \"browserstack.user\": bs_credentials[\"user\"],\n                \"browserstack.key\": bs_credentials[\"key\"],\n                \"project\": \"Mobile Demo\",\n                \"build\": \"iOS Build\",\n                \"name\": request.node.name\n            }\n        else:\n            # default Android\n            caps = {\n                \"platformName\": \"Android\",\n                \"deviceName\": os.environ.get(\"BS_DEVICE\", \"Samsung Galaxy S22\"),\n                \"platformVersion\": os.environ.get(\"BS_PLATFORM_VERSION\", \"12.0\"),\n                \"app\": bs_credentials[\"app\"],\n                \"automationName\": \"UiAutomator2\",\n                \"browserstack.user\": bs_credentials[\"user\"],\n                \"browserstack.key\": bs_credentials[\"key\"],\n                \"project\": \"Mobile Demo\",\n                \"build\": \"Android Build\",\n                \"name\": request.node.name\n            }\n    \n        hub = os.environ.get(\"BS_HUB\", \"http://hub-cloud.browserstack.com/wd/hub\")\n>       driver = webdriver.Remote(hub, caps)\n\nconftest.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:249: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[AttributeError(\"'WebDriver' object has no attribute 'session_id'\") raised in repr()] WebDriver object at 0x1a9e7d70a50>\ncommand_executor = <appium.webdriver.appium_connection.AppiumConnection object at 0x000001A9E7D70CD0>, keep_alive = True\nfile_detector = None, options = None\nlocator_converter = <appium.webdriver.locator_converter.AppiumLocatorConverter object at 0x000001A9E7D71090>\nweb_element_cls = <class 'appium.webdriver.webelement.WebElement'>\nclient_config = <appium.webdriver.client_config.AppiumClientConfig object at 0x000001A9E7D70B90>\n\n    def __init__(\n        self,\n        command_executor: Union[str, RemoteConnection] = \"http://127.0.0.1:4444\",\n        keep_alive: bool = True,\n        file_detector: Optional[FileDetector] = None,\n        options: Optional[Union[BaseOptions, list[BaseOptions]]] = None,\n        locator_converter: Optional[LocatorConverter] = None,\n        web_element_cls: Optional[type[WebElement]] = None,\n        client_config: Optional[ClientConfig] = None,\n    ) -> None:\n        \"\"\"Create a new driver that will issue commands using the wire\n        protocol.\n    \n        Parameters:\n        -----------\n        command_executor : str or remote_connection.RemoteConnection\n            - Either a string representing the URL of the remote server or a custom\n            remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n        keep_alive : bool (Deprecated)\n            - Whether to configure remote_connection.RemoteConnection to use HTTP keep-alive. Defaults to True.\n        file_detector : object or None\n            - Pass a custom file detector object during instantiation. If None, the default\n                LocalFileDetector() will be used.\n        options : options.Options\n            - Instance of a driver options.Options class.\n        locator_converter : object or None\n            - Custom locator converter to use. Defaults to None.\n        web_element_cls : class\n            - Custom class to use for web elements. Defaults to WebElement.\n        client_config : object or None\n            - Custom client configuration to use. Defaults to None.\n        \"\"\"\n    \n        if options is None:\n>           raise TypeError(\n                \"missing 1 required keyword-only argument: 'options' (instance of driver `options.Options` class)\"\nE               TypeError: missing 1 required keyword-only argument: 'options' (instance of driver `options.Options` class)\n\nC:\\Users\\db595\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:233: TypeError"}, "start": 1758098463139, "stop": 1758098463139, "uuid": "70dbfcd6-468a-40d4-b8b2-2177c004996d", "historyId": "c4547e0766d6c604f1234a91c62fda1f", "testCaseId": "42377a4218ac8a25fd3755815d980eaa", "fullName": "tests.test_invalid_login#test_locked_out_user_shows_error", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_invalid_login"}, {"name": "host", "value": "DB-L-174"}, {"name": "thread", "value": "972-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_invalid_login"}]}